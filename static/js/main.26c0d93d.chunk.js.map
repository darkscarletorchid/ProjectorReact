{"version":3,"sources":["components/note-item.tsx","components/note-list.tsx","core/app.types.ts","core/notes.repository.ts","components/view-note.tsx","components/create.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NoteItem","props","Card","CardActionArea","CardContent","onClick","onSelect","item","id","Typography","gutterBottom","variant","component","title","color","string","isHtmlContent","limit","preview","tempEl","document","createElement","innerHTML","textContent","length","substring","truncateString","content","CardActions","Button","onDelete","NoteListView","Mode","Grid","container","xs","direction","justifyContent","style","padding","onCreate","items","map","element","Box","m","onUpdate","NotesRepository","key","notesList","localStorage","getItem","this","JSON","parse","find","_","push","setItem","stringify","index","findIndex","splice","ViewNote","str","notAllowedTags","options","replace","domNode","indexOf","name","useEffect","querySelectorAll","forEach","addEventListener","e","preventDefault","result","window","confirm","link","currentTarget","getAttribute","open","selectedItem","align","textAlign","Parse","CreateView","useState","note","setNote","error","setError","spacing","alignItems","autoComplete","margin","TextField","label","type","fullWidth","helperText","onChange","target","value","minRows","multiline","maxRows","isHtmlString","fragment","createRange","createContextualFragment","el","parentNode","removeChild","trim","isHTML","nativeEvent","inputType","disabled","onCancel","notesRepo","App","None","mode","setMode","getAll","setItems","setSelectedItem","className","View","Create","create","delete","get","Edit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.26c0d93d.chunk.js","sourcesContent":["import Container  from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport React from 'react';\nimport { Note } from '../core/app.types';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\ntype  NoteItemProps = {\n    item: Note;\n    onSelect(id: number): void;\n    onUpdate(id: number): void;\n    onDelete(id: number): void;\n  }\nfunction NoteItem(props: NoteItemProps) {\n\n    function truncateString(string: string, isHtmlContent: boolean, limit: number) {\n        let preview: string | null = string;\n        if (isHtmlContent) {\n           let tempEl = document.createElement(\"div\");\n           tempEl.innerHTML = string;\n           preview = tempEl.textContent;\n        }\n        if (!preview) {\n            return \"\";\n        }\n        else if (preview.length > limit) {\n          return preview.substring(0, limit) + \"...\"\n        } else {\n          return preview;\n        }\n      }\n\n    return (\n           <Card>\n      <CardActionArea>\n        <CardContent onClick={() => {props.onSelect(props.item.id)}}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n           {props.item.title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {truncateString(props.item.content, props.item.isHtmlContent, 100)}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        {/* <Button variant=\"contained\"color=\"primary\" onClick={() => {props.onUpdate(props.item.id)}}> */}\n          {/* Edit */}\n        {/* </Button> */}\n        <Button variant=\"contained\" color=\"primary\" onClick={() => {props.onDelete(props.item.id)}}>\n          Delete\n        </Button>\n      </CardActions>\n    </Card>\n    );\n  }\n  \n  export default NoteItem;","import Button from '@material-ui/core/Button';\nimport React from 'react';\nimport NoteItem from './note-item';\nimport { Note } from '../core/app.types';\nimport { Grid, Typography, Box } from '@material-ui/core';\n\ntype  NoteListViewProps = {\n    items: Note[];\n    onSelect(id: number): void;\n    onCreate(): void;\n    onUpdate(id: number): void;\n    onDelete(id: number): void;\n  }\n  \nfunction NoteListView(props: NoteListViewProps) {   \n    return (\n        <Grid container xs={12} direction=\"column\">\n            <Grid container xs={12} direction=\"row\" justifyContent=\"space-between\" style={{padding: '1em'}}>\n                <Typography variant='h4'>Note list</Typography>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => props.onCreate()}>Create new</Button>\n            </Grid>\n            <Grid item xs={12}>\n            {props.items && props.items.map(element => {\n                    return (<Box m={0.5}><NoteItem item={element} onSelect={props.onSelect} onUpdate={props.onUpdate} onDelete={props.onDelete}></NoteItem></Box>)\n            })}\n            </Grid>\n        </Grid>\n    );\n  }\n  \n  export default NoteListView;","export interface Note  {\n    id: number;\n    isHtmlContent: boolean;\n    title: string;\n    content: string;\n}\n\nexport enum Mode {\n    None,\n    View,\n    Create,\n    Edit\n}","import { Note } from \"./app.types\";\n\nexport default class NotesRepository {\n\n    readonly key: string = \"notesList\";\n    notesList: Note[];\n    \n\n    constructor() {\n        if (localStorage.getItem(this.key) != null) {\n            this.notesList = JSON.parse(localStorage.getItem(this.key) || \"\")\n        } \n        else {\n            this.notesList = [];\n        }\n      }\n\n    getAll(): Note[] {\n        return this.notesList;\n    };\n\n    get(id: number): Note | null {\n        return this.notesList.find(_ => _.id == id) || null;\n    };\n\n    create(item: Note) {\n        item.id = this.notesList.length > 0 ? this.notesList[this.notesList.length - 1].id + 1 : 1;\n        this.notesList.push(item);\n        localStorage.setItem(this.key, JSON.stringify(this.notesList));\n    };\n\n    update(item: Note) {\n\n        let index = this.notesList.findIndex(_ => _.id == item.id);\n        this.notesList[index] = item;\n        localStorage.setItem(this.key, JSON.stringify(this.notesList));\n    };\n\n    delete(id: number) {\n        let index = this.notesList.findIndex(_ => _.id == id);\n        this.notesList.splice(index, 1);\n        localStorage.setItem(this.key, JSON.stringify(this.notesList));\n    };\n}","import React from 'react';\nimport {useEffect} from 'react';\n\nimport { Note } from '../core/app.types';\nimport Typography from '@material-ui/core/Typography';\nimport Parse from 'html-react-parser';\nimport { Grid, Box} from '@material-ui/core';\n\n\ntype  ViewNoteProps = {\n    selectedItem: Note;\n  }\n\nfunction ViewNote(props: ViewNoteProps) {\n\n    const notAllowedTags = ['script', 'iframe']\n    const options = {\n        replace: (domNode: any) => {\n          if (notAllowedTags.indexOf(domNode.name) != -1) {\n            return <div/>;\n          }\n        }\n      };\n\n    const formatContent = (str: string, isHtmlContent: boolean) : string | JSX.Element | JSX.Element[] => {\n        if (isHtmlContent) \n        {\n            return Parse(str, options);\n        }\n        return str;\n    }\n\n    useEffect(() => {\n        document.querySelectorAll('a').forEach(element => {\n            element.addEventListener('click', (e) => {\n                e.preventDefault();\n                let result = window.confirm(\"Are you sure that you want to follow this link?\");\n                let link = (e.currentTarget as HTMLElement).getAttribute('href');\n                if (result && !!link) {\n                    window.open(link, '_blank');\n                }\n            })\n        });\n    }, [props.selectedItem])\n\n    return (\n        <Grid xs={12} container direction=\"column\">\n            <Box m={2}><Typography align=\"left\" variant=\"h4\">{props.selectedItem.title}</Typography></Box>\n            <Box m={2} textAlign=\"left\">{formatContent(props.selectedItem.content, props.selectedItem.isHtmlContent)}</Box>\n        </Grid>\n    );\n  }\n  \n  export default ViewNote;","import Container  from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport React, { BaseSyntheticEvent } from 'react';\nimport {useState} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\nimport { Note } from '../core/app.types';\nimport { Box, Typography } from '@material-ui/core';\n\ntype  CreateViewProps = {\n    onCreate(item: Note): void;\n    onCancel(): void;\n  }\nfunction CreateView(props: CreateViewProps) {\n    const [note, setNote] = useState({title: \"\", content: \"\"} as Note) \n    const [error, setError] = useState(false);\n    const maxTitleLength = 50;\n    const titleOverflowError = 'You have reached max title length';\n\n    const isHTML = (str: string) => {\n        const fragment = document.createRange().createContextualFragment(str);\n        \n        fragment.querySelectorAll('*').forEach(el => el?.parentNode?.removeChild(el));\n        \n        return !(fragment.textContent || '').trim();\n      }\n\n    return (\n            <Grid container spacing={3} xs={12} alignItems=\"flex-start\">\n                 <Grid item xs={12}>\n                    <Box m={2}><Typography variant='h4'>Create new note</Typography></Box>\n                 </Grid>\n                 <Grid item xs={12}>\n                    <form autoComplete=\"off\">\n                    <Grid item xs={12} style={{margin: '1em'}}>\n                <TextField id=\"title\" label=\"Title\" type=\"text\" variant=\"outlined\" fullWidth error={error} helperText={error ? titleOverflowError : \"\"} onChange={(e) => {\n                    if (e.target.value.length > maxTitleLength) {\n                        setError(true);\n                    } else {\n                        setError(false);\n                    }\n                    note.title = e.target.value;\n                    setNote(note);\n                }}/> </Grid>\n                <Grid item xs={12} style={{margin: '1em'}}>\n                <TextField id=\"content\" label=\"Content\" variant=\"outlined\" fullWidth minRows={20} multiline maxRows={20} onChange={(e) => {\n                     \n                    let isHtmlString = isHTML(e.target.value);\n                    \n                    if ((e.nativeEvent as InputEvent).inputType === \"insertFromPaste\" && isHtmlString) {\n                        note.isHtmlContent = true;\n                    }\n                    note.content = e.target.value;\n                    setNote(note);\n                }}/>\n                </Grid>\n                <Grid item xs={12} justifyContent=\"flex-end\" container > \n                    <Button variant=\"contained\"  style={{margin: '1em'}} color=\"primary\" disabled={error} onClick={() =>props.onCreate(note)}>Create</Button>\n                    <Button variant=\"contained\"  style={{margin: '1em'}} onClick={props.onCancel}>Cancel</Button>\n                </Grid>\n            </form>\n            </Grid>\n            </Grid>\n    );\n  }\n  \n  export default CreateView;","import React, { useEffect } from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport NoteList from './components/note-list';\nimport NotesRepository from './core/notes.repository';\nimport { useState } from 'react';\nimport { Mode, Note} from './core/app.types';\nimport ViewNote from './components/view-note';\nimport CreateView from './components/create';\nimport { Typography,Box, Paper } from '@material-ui/core';\n\nlet notesRepo = new NotesRepository();\n\nfunction App() {\n\n  const [mode, setMode] = useState(Mode.None);\n  const [items, setItems] = useState(notesRepo.getAll());\n  const [selectedItem, setSelectedItem] = useState<Note>({} as Note);\n\n  const cancelAction = () => {\n    setMode(Mode.None);\n    setSelectedItem({} as Note);\n  }\n\n  const createAction = (item: Note) => {\n    setMode(Mode.None);\n    notesRepo.create(item); \n    setItems([...notesRepo.getAll()]);\n  }\n\n  // const updateAction = (item: Note) => {\n  //   setMode(Mode.None);\n  //   notesRepo.update(item);\n  //   setItems([...notesRepo.getAll()])\n  // }\n\n  const deleteAction = (id: number) => {\n    notesRepo.delete(id); \n    setItems([...notesRepo.getAll()]); \n    if (selectedItem.id === id) {\n      setMode(Mode.None);\n    }\n  }\n\n  return (\n    <Box className=\"App\" m={3}>\n      <Grid container spacing={3} alignItems=\"flex-start\">\n        <Grid item xs={6}>\n            {mode === Mode.None && <Box m={2}><Typography variant='h4'>Let's create a note</Typography></Box>}\n            {mode === Mode.View && <ViewNote selectedItem={selectedItem}></ViewNote>}\n            {mode === Mode.Create && <CreateView onCancel={cancelAction} onCreate={createAction}></CreateView>}\n        </Grid>\n        <Grid item xs={6}>\n          <NoteList \n            items={items} \n            onDelete={deleteAction} \n            onSelect={(id) => {setMode(Mode.View); let note = notesRepo.get(id); if (!!note) {setSelectedItem(note)}}} \n            onCreate={() => {setMode(Mode.Create);}} \n            onUpdate={(id) => {setMode(Mode.Edit); let note = notesRepo.get(id); if (!!note) {setSelectedItem(note)}}}></NoteList>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}